//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class TechnologicalWarehouseEntities1 : DbContext
    {
        public TechnologicalWarehouseEntities1()
            : base("name=TechnologicalWarehouseEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tblRecordProducts> tblRecordProducts { get; set; }
        public DbSet<tblLogin> tblLogin { get; set; }
    
        public virtual int DeleteProduct(Nullable<int> productCode)
        {
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduct", productCodeParameter);
        }
    
        public virtual int InsertProduct(Nullable<int> productCode, string nameProduct, string productDescription, string productBrand, string productModel, string productSerial, string productStatus)
        {
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(int));
    
            var nameProductParameter = nameProduct != null ?
                new ObjectParameter("NameProduct", nameProduct) :
                new ObjectParameter("NameProduct", typeof(string));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("ProductDescription", productDescription) :
                new ObjectParameter("ProductDescription", typeof(string));
    
            var productBrandParameter = productBrand != null ?
                new ObjectParameter("ProductBrand", productBrand) :
                new ObjectParameter("ProductBrand", typeof(string));
    
            var productModelParameter = productModel != null ?
                new ObjectParameter("ProductModel", productModel) :
                new ObjectParameter("ProductModel", typeof(string));
    
            var productSerialParameter = productSerial != null ?
                new ObjectParameter("ProductSerial", productSerial) :
                new ObjectParameter("ProductSerial", typeof(string));
    
            var productStatusParameter = productStatus != null ?
                new ObjectParameter("ProductStatus", productStatus) :
                new ObjectParameter("ProductStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduct", productCodeParameter, nameProductParameter, productDescriptionParameter, productBrandParameter, productModelParameter, productSerialParameter, productStatusParameter);
        }
    
        public virtual int UpdateProduct(Nullable<int> productCode, string nameProduct, string productDescription, string productBrand, string productModel, string productSerial, string productStatus)
        {
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(int));
    
            var nameProductParameter = nameProduct != null ?
                new ObjectParameter("NameProduct", nameProduct) :
                new ObjectParameter("NameProduct", typeof(string));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("ProductDescription", productDescription) :
                new ObjectParameter("ProductDescription", typeof(string));
    
            var productBrandParameter = productBrand != null ?
                new ObjectParameter("ProductBrand", productBrand) :
                new ObjectParameter("ProductBrand", typeof(string));
    
            var productModelParameter = productModel != null ?
                new ObjectParameter("ProductModel", productModel) :
                new ObjectParameter("ProductModel", typeof(string));
    
            var productSerialParameter = productSerial != null ?
                new ObjectParameter("ProductSerial", productSerial) :
                new ObjectParameter("ProductSerial", typeof(string));
    
            var productStatusParameter = productStatus != null ?
                new ObjectParameter("ProductStatus", productStatus) :
                new ObjectParameter("ProductStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProduct", productCodeParameter, nameProductParameter, productDescriptionParameter, productBrandParameter, productModelParameter, productSerialParameter, productStatusParameter);
        }
    
        public virtual ObjectResult<string> ConsultUser(string user, string password)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ConsultUser", userParameter, passwordParameter);
        }
    
        public virtual int DeleteAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAll");
        }
    }
}
